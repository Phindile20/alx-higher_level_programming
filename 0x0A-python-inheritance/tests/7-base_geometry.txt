the ``base_geometry doctest`` module
=====================================

Using ``BaseGeometry``
_____________________________________

Tests to run for task 7-base_geometry.

import function from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    Checking case with string:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...    print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] name must be an integer

    Checking with an integer of 0:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [ValueError] age must be greater than 0

    Checking with negative int:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [ValueError] distance must be greater than 0

    Checking with a regular int:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)

    Checking with an empty string:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("name", "")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] name must be an integer

    Checking with a float:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [ValueError] distance must be greater than 0

    Checking with nothing for value:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator("age", )
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

    Checking with nothing at all:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

    Checking with no name:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator(, 4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    CHecking with name as non-string:
    >>> bg = BaseGeometry()
    ... try:
    ...     bg.integer_validator(age, 4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [NameError] name 'age' is not defined
